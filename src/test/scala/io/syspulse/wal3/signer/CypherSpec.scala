package io.syspulse.wal3.signer

import org.scalatest.{Ignore}
import org.scalatest.wordspec.{ AnyWordSpec}
import org.scalatest.matchers.should.{ Matchers}
import org.scalatest.flatspec.AnyFlatSpec

import io.jvm.uuid._

import scala.util.{Try,Success,Failure}
import java.time._
import io.syspulse.wal3.WalletSecret
import io.syspulse.skel.crypto.Eth
import scala.util.Random
import io.syspulse.skel.util.Util
import io.syspulse.wal3.cypher.CypherNone
import io.syspulse.blockchain.Blockchains
// import io.syspulse.skel.util.Util

class SignerSpec extends AnyWordSpec with Matchers {
  
  "SSS Signer" should {

    "SecretShare encode and decode 1 Share" in {
      val s1 = SecretShare(
        "1/" +
        "7361427092681313269810524519830455803016610949053270811455406004054541098502340806596485551435667501112158150867880594089355108900763350474560900214074349/" +
        "0xbeb50a33de0d8234f0efd51c90ef339e46089001e6afa62b9f79e8158588f9ae/" +
        "7361427092681313269810524519830455803016610949053270811455406004054541098502376421162898176865507507308336261795884733274980097792286908726033065279199919")

      s1 shouldBe a [List[_]]
      s1.size should === (1)
      s1(0).x should === (BigInt(1))
      s1(0).y should === (BigInt("7361427092681313269810524519830455803016610949053270811455406004054541098502340806596485551435667501112158150867880594089355108900763350474560900214074349"))
      s1(0).hash should === (Util.fromHexString("0xbeb50a33de0d8234f0efd51c90ef339e46089001e6afa62b9f79e8158588f9ae"))
      s1(0).primeUsed should === ("7361427092681313269810524519830455803016610949053270811455406004054541098502376421162898176865507507308336261795884733274980097792286908726033065279199919")
    }

    "SecretShare encode and decode 3 Shares" in {
      val s1 = SecretShare(
        "1/" +
        "7361427092681313269810524519830455803016610949053270811455406004054541098502340806596485551435667501112158150867880594089355108900763350474560900214074349/" +
        "0xbeb50a33de0d8234f0efd51c90ef339e46089001e6afa62b9f79e8158588f9ae/" +
        "7361427092681313269810524519830455803016610949053270811455406004054541098502376421162898176865507507308336261795884733274980097792286908726033065279199919" +
        ","+
        "2/" +
        "7361427092681313269810524519830455803016610949053270811455406004054541098502340806596485551435667501112158150867880594089355108900763350474560900214074349/" +
        "0xbeb50a33de0d8234f0efd51c90ef339e46089001e6afa62b9f79e8158588f9ae/" +
        "7361427092681313269810524519830455803016610949053270811455406004054541098502376421162898176865507507308336261795884733274980097792286908726033065279199919" +
        "," +
        "3/" +
        "7361427092681313269810524519830455803016610949053270811455406004054541098502340806596485551435667501112158150867880594089355108900763350474560900214074349/" +
        "0xbeb50a33de0d8234f0efd51c90ef339e46089001e6afa62b9f79e8158588f9ae/" +
        "7361427092681313269810524519830455803016610949053270811455406004054541098502376421162898176865507507308336261795884733274980097792286908726033065279199919"
      )

      s1 shouldBe a [List[_]]
      s1.size should === (3)
      s1(0).x should === (BigInt(1))
      s1(0).y should === (BigInt("7361427092681313269810524519830455803016610949053270811455406004054541098502340806596485551435667501112158150867880594089355108900763350474560900214074349"))
      s1(0).hash should === (Util.fromHexString("0xbeb50a33de0d8234f0efd51c90ef339e46089001e6afa62b9f79e8158588f9ae"))
      s1(0).primeUsed should === ("7361427092681313269810524519830455803016610949053270811455406004054541098502376421162898176865507507308336261795884733274980097792286908726033065279199919")

      s1(1).x should === (BigInt(2))
      s1(2).x should === (BigInt(3))
    }

    "create from 0x1 and sign" in {
      val s = new WalletSignerSSS(new CypherNone(""),"1:2",Blockchains())
      val ws = s.create(None,"0x1")
      ws.isSuccess should === (true)
      ws.get.metadata should === (",")
      ws.get.metadata.split(",",1024).size should === (2)
      ws.get.sk.split(",",1024).size should === (2)

      val sig1 = s.sign(ws.get,"0x2",0,"",0,0,0)
      info(s"sig1=${sig1}")
      sig1.isSuccess should === (true)
      sig1.get should !== ("")
    }
  }
}
